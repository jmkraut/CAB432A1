{"version":3,"sources":["images/ds.png","images/favicon.ico","images/tm.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","names","images","info","urls","venues","dates","App","useState","temp","setTemp","city","setCity","wind","setWind","bearing","setBearing","hidden","setHidden","loading","setLoading","icon","setIcon","summary","setSummary","cards","setCards","useEffect","fetch","then","res","json","i","push","Ticketmaster","Names","Images","Info","Urls","Venues","Dates","Ipdata","City","Darksky","Currently","Summary","Temperature","Wind","toFixed","Icon","WindBearing","tempcards","length","style","width","className","Header","Img","variant","src","Title","Body","Text","Footer","Link","href","bg","sticky","md","Brand","color","size","animate","animation","xs","lg","sm","ds","alt","fluid","ipdata","tm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78c2dfbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ds.a509dfef.png\";","module.exports = __webpack_public_path__ + \"static/media/favicon.a1954f60.ico\";","module.exports = __webpack_public_path__ + \"static/media/tm.def1e158.png\";","import React, { useState, useEffect } from \"react\";\r\nimport ReactAnimatedWeather from \"react-animated-weather\";\r\nimport \"./App.css\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport CardColumns from \"react-bootstrap/CardColumns\";\r\nimport ds from \"./images/ds.png\";\r\nimport ipdata from \"./images/favicon.ico\";\r\nimport tm from \"./images/tm.png\";\r\n\r\n\r\n//Arrays that are required for the cards\r\nlet names = [];\r\nlet images = [];\r\nlet info = [];\r\nlet urls = [];\r\nlet venues = [];\r\nlet dates = [];\r\n\r\nfunction App() {\r\n  //These hooks populate the page after it has already loaded.\r\n  const [temp, setTemp] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [wind, setWind] = useState(\"\");\r\n  const [bearing, setBearing] = useState(\"\");\r\n  const [hidden, setHidden] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [icon, setIcon] = useState(\"\");\r\n  const [summary, setSummary] = useState(\"\");\r\n  const [cards, setCards] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api\")\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        //Places the data into arrays for the cards array\r\n        for (let i = 0; i < 20; i++) {\r\n          names.push(res.Ticketmaster.Names[i]);\r\n          images.push(res.Ticketmaster.Images[i]);\r\n          info.push(res.Ticketmaster.Info[i]);\r\n          urls.push(res.Ticketmaster.Urls[i]);\r\n          venues.push(res.Ticketmaster.Venues[i]);\r\n          dates.push(res.Ticketmaster.Dates[i]);\r\n        }\r\n\r\n        setHidden(true);\r\n        setLoading(false);\r\n        setCity(res.Ipdata.City);\r\n        setSummary(res.Darksky.Currently.Summary);\r\n        setTemp(res.Darksky.Currently.Temperature);\r\n        setWind((res.Darksky.Currently.Wind * 1.944).toFixed(1))\r\n        setIcon(res.Darksky.Currently.Icon);\r\n        setBearing(res.Darksky.Currently.WindBearing)\r\n      })\r\n      .then(() => {\r\n        // Holds the information before the Hook populates the cards array\r\n        let tempcards = [];\r\n\r\n        // Populates the tempcards array\r\n        for (let i = 0; i < names.length; i++) {\r\n          tempcards.push(\r\n            <Card style={{ width: \"18rem\" }} className=\"card\">\r\n              <Card.Header>{names[i]}</Card.Header>\r\n              <Card.Img variant=\"top\" className=\"card-image\" src={images[i]} />\r\n              <br />\r\n              <Card.Title>{venues[i]}</Card.Title>\r\n              <Card.Title>{dates[i]}</Card.Title>\r\n              <Card.Body className=\"card-info\">\r\n                <Card.Text>{info[i]}</Card.Text>\r\n              </Card.Body>\r\n              <Card.Footer>\r\n                <Card.Link href={urls[i]}>{urls[i]}</Card.Link>\r\n              </Card.Footer>\r\n            </Card>\r\n          );\r\n        }\r\n\r\n        // Hook that populates the actual cards array\r\n        setCards(tempcards);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* Top Navbar Construction */}\r\n      <Navbar className=\"Topbar\" bg=\"dark\" variant=\"dark\" sticky=\"top\">\r\n        {/* Separate the navbar into 3 columns */}\r\n        <Container>\r\n          {/* Navbar Title */}\r\n          <Row>\r\n            <Col md=\"auto\">\r\n              <Navbar.Brand>\r\n                <h1>EventWeather</h1>\r\n                <h6>Events and weather for your day out.</h6>\r\n              </Navbar.Brand>\r\n            </Col>\r\n            {/* Animated weather icon */}\r\n            <Col md=\"auto\">\r\n              <Navbar.Brand>\r\n                <ReactAnimatedWeather\r\n                  icon={icon}\r\n                  color=\"white\"\r\n                  size={64}\r\n                  animate={true}\r\n                />\r\n              </Navbar.Brand>\r\n            </Col>\r\n            {/* Weather report section */}\r\n            {/* Spinner to indicate loading, hides after the page is populated. */}\r\n\r\n            <Spinner\r\n              className=\"spinner\"\r\n              animation=\"border\"\r\n              hidden={hidden}\r\n              variant=\"light\"\r\n            />\r\n            <span className=\"loading\" hidden={hidden}>\r\n              Loading...\r\n            </span>\r\n\r\n            <Col md=\"auto\" className=\"weather-report\" hidden={loading}>\r\n              <strong>{city}</strong>\r\n            </Col>\r\n            <Col md=\"auto\" className=\"weather-report\" hidden={loading}>\r\n              {summary}\r\n            </Col>\r\n            <Col md=\"auto\" className=\"weather-report\" hidden={loading}>\r\n              {temp} Â°C\r\n            </Col>\r\n            <Col md=\"auto\" className=\"weather-report\" hidden={loading}>\r\n              {wind} knots {bearing}\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Navbar>\r\n\r\n      {/* Renders the cards array into the columns */}\r\n      <CardColumns className=\"card-columns\" hidden={loading}>\r\n        {cards}\r\n      </CardColumns>\r\n\r\n      {/* Bottom Navbar Construction */}\r\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"bottom\">\r\n        {/* Container to hold the API powered by images */}\r\n        <Container>\r\n          <Row>\r\n            {/* Darksky API */}\r\n            <Col xs={2} md={1} lg={1} sm={2}>\r\n              <Image className=\"darksky\" src={ds} alt={\"ds\"} fluid />\r\n            </Col>\r\n\r\n            {/* IPData.co API */}\r\n            <Col xs={2} md={1} lg={1} sm={2}>\r\n              <Image className=\"ipdata\" src={ipdata} alt={\"ipdata\"} fluid />\r\n            </Col>\r\n\r\n            {/* Ticketmaster API */}\r\n            <Col xs={3} md={2} lg={2} sm={3}>\r\n              <Image className=\"tm\" src={tm} alt={\"tm\"} fluid />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}